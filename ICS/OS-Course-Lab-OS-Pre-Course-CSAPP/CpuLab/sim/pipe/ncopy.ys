#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name: 刘浩宇
# ID：523031910521
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
        iaddq $-8, %rdx       # len -= 8
        jl residual

    unrolled8:
        # 当前批次数据处理
        mrmovq 0(%rdi), %r8    # elem0
        mrmovq 8(%rdi), %r9    # elem1
        mrmovq 16(%rdi), %r10  # elem2
        mrmovq 24(%rdi), %r11  # elem3
        mrmovq 32(%rdi), %r12  # elem4
        mrmovq 40(%rdi), %r13  # elem5
        mrmovq 48(%rdi), %r14  # elem6
        mrmovq 56(%rdi), %rcx  # elem7

        # 交错存储与条件判断
        rmmovq %r8, 0(%rsi)    # store0
        andq %r8, %r8
        jle t1

        iaddq $1, %rax

    t1: rmmovq %r9, 8(%rsi)    # store1
        andq %r9, %r9
        jle t2
        iaddq $1, %rax

    t2: rmmovq %r10, 16(%rsi)  # store2
        andq %r10, %r10
        jle t3
        iaddq $1, %rax


    t3: rmmovq %r11, 24(%rsi)  # store3
        andq %r11, %r11
        jle t4
        iaddq $1, %rax

    t4: rmmovq %r12, 32(%rsi)  # store4
        andq %r12, %r12
        jle t5
        iaddq $1, %rax


    t5: rmmovq %r13, 40(%rsi)  # store5
        andq %r13, %r13
        jle t6
        iaddq $1, %rax

    t6: rmmovq %r14, 48(%rsi)  # store6
        andq %r14, %r14
        jle t7
        iaddq $1, %rax


    t7: rmmovq %rcx, 56(%rsi)  # store7
        andq %rcx, %rcx
        jle loop_end
        iaddq $1, %rax

    loop_end:
        # 合并指针更新操作 (减少指令数)
        iaddq $64, %rdi        # src += 8*8
        iaddq $64, %rsi        # dst += 8*8
        iaddq $-8, %rdx        # len -= 8
        jge unrolled8

    #------------------------ 流水线化剩余处理 ----------------------#
    residual:
        iaddq $8, %rdx         # len += 8
        je Done

        # 4元素处理 (优化版)
        iaddq $-4, %rdx
        jl res_less4
        mrmovq 0(%rdi), %r8
        mrmovq 8(%rdi), %r9
        mrmovq 16(%rdi), %r10
        mrmovq 24(%rdi), %r11

        # 交错存储与判断
        rmmovq %r8, 0(%rsi)
        andq %r8, %r8
        jle r1
        iaddq $1, %rax

    r1: rmmovq %r9, 8(%rsi)
        andq %r9, %r9
        jle r2
        iaddq $1, %rax

    r2: rmmovq %r10, 16(%rsi)
        andq %r10, %r10
        jle r3
        iaddq $1, %rax

    r3: rmmovq %r11, 24(%rsi)
        andq %r11, %r11
        jle r_next
        iaddq $1, %rax

    r_next:
        iaddq $32, %rdi
        iaddq $32, %rsi
        iaddq $-4, %rdx

    res_less4:
        # 2元素块
        iaddq $2, %rdx
        jl res_less2
        mrmovq 0(%rdi), %r8
        mrmovq 8(%rdi), %r9
        rmmovq %r8, 0(%rsi)
        rmmovq %r9, 8(%rsi)
        andq %r8, %r8
        jle r7
        iaddq $1, %rax
    r7: andq %r9, %r9
        jle r8
        iaddq $1, %rax
    r8: iaddq $16, %rdi
        iaddq $16, %rsi
        iaddq $-2, %rdx

    res_less2:
        # 单个元素
        iaddq $1, %rdx
        jl Done
        mrmovq 0(%rdi), %r8
        rmmovq %r8, 0(%rsi)
        andq %r8, %r8
        jle Done
        iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
